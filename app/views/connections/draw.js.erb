$("#draw_connections_link_<%= @server.id %> button").html('<span class="glyphicon glyphicon-random" aria-hidden="true"></span>')
$("#draw_connections_link_<%= @server.id %> button").toggleClass('btn-warning')
$("#back_server_<%= @server.id %>").toggleClass('connections-activated')

var activated_servers = activated_servers || {}

if (exists(activated_servers[<%= @server.id %>])) { // TOGGLE
    delete_lines(<%= @server.id %>)
} else {
    create_lines('<%= @server.id %>')
}

function create_lines(server_id) {
    // First, set potential twin card data
    var twin_card_data = get_twin_cards()

    <% @server.ports.each do |port| %>
      <% if port.paired_connection.present? %>
        draw_connection(server_id,
            '<%= port.id %>',
            '<%= port.paired_connection.port_id %>',
            '<%= port.cable_color %>',
            '<%= port.cable_name %>',
            twin_card_data['<%= port.id %>']
        )
      <% end %>
    <% end %>
}

function get_twin_cards() {
  var twin_cards = {}
  <% @server.cards.each do |card| %>
    <% if card.twin_card_id.present? %>
      <% twin_card_ports = Port.where(card_id: card.twin_card_id) %>
      <% card.ports.each do |port| %>
        <% if port.connection.present? %>
          <% twin_card_port = twin_card_ports.select{|p| p.position == port.position}.first %>
          <% twin_card_paired_connection = twin_card_port.paired_connection %>
          <% if twin_card_paired_connection.present? %>
              twin_cards['<%= port.id %>'] = {twin_card_port_id: '<%= twin_card_port.id %>',
                                     twin_card_paired_port_id: <%= twin_card_paired_connection.port_id %>,
                                     cable_color: '<%= twin_card_port.cable_color %>',
                                     cable_name: '<%= twin_card_port.cable_name %>'}
          <% end %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
  return twin_cards
}

function draw_connection(server_id, port_id, destination_port_id, cable_color, cable_name, twin_card_data){
    let elt_start, elt_end
    elt_start = document.getElementById(port_id)
    elt_end = document.getElementById(destination_port_id)
    if (exists(elt_start) && exists(elt_end)) {
        create_line(server_id, port_id, elt_start, elt_end, cable_color, cable_name, twin_card_data)
    }
}

function create_line(server_id, port_id, elt_start, elt_end, cable_color, cable_name, twin_card_data) {
    activated_servers[server_id] = activated_servers[server_id] || {}

    var line = new LeaderLine(
        elt_start,
        elt_end,
        {
            color: colors_hash[cable_color],
            size: 2,
            middleLabel: cable_name,
            endPlug: 'behind',
            endSocket: 'auto',
            path: 'fluid', //'fluid',
            hide: true
        }
    )

    // Twin card line
    if(exists(twin_card_data)){
        var twin_elt_start = document.getElementById(twin_card_data['twin_card_port_id'])
        var twin_elt_end = document.getElementById(twin_card_data['twin_card_paired_port_id'])
        if (exists(twin_elt_start) && exists(twin_elt_end)) {
            var twin_line = new LeaderLine(
                twin_elt_start,
                twin_elt_end,
                {
                    color: colors_hash[twin_card_data['cable_color']],
                    size: 2,
                    middleLabel: twin_card_data['cable_name'],
                    endPlug: 'behind',
                    endSocket: 'auto',
                    path: 'fluid', //'fluid',
                    hide: true
                }
            )
        }
    }

    var ports_elts = [elt_start, elt_end, twin_elt_start, twin_elt_end]
    var highlightLines = function(){
        set_line_options(line, 'hover')
        if(twin_line){set_line_options(twin_line, 'hover')}
        outline_elements(ports_elts, true)
    }
    var donotHighlightLines = function () {
        set_line_options(line, 'leave')
        if(twin_line){set_line_options(twin_line, 'leave')}
        outline_elements(ports_elts, false)
    }
    var handleClickOnPort = function(e){
        if($("#back_server_<%= @server.id %>").hasClass('connections-activated')){
            e.preventDefault()
            e.stopPropagation()
            $(e.target).toggleClass('connection-activated')
            if($(e.target).hasClass('connection-activated')){
                highlightLines()
                $(e.target).off('mouseleave')
            }else{
                donotHighlightLines()
                $(e.target).on('mouseleave', donotHighlightLines)
            }
        }else{
            return true // Do not prevent default ; Do not stop propagation
        }
    }
    var removePreviousEventListeners = function(elem){
        $(elem).off()
    }
    var addNewEventListeners = function(elem){
        $(elem).on({
            click: handleClickOnPort,
            mouseenter: highlightLines,
            mouseleave: donotHighlightLines
        })
    }
    ports_elts.forEach(function (elem) {
        if(exists(elem)){
            removePreviousEventListeners(elem)
            addNewEventListeners(elem)
        }
    })

    line.show()
    activated_servers[server_id][port_id] = activated_servers[server_id][port_id] || []
    activated_servers[server_id][port_id].push(line)
    if(twin_line){
        twin_line.show()
        activated_servers[server_id][port_id].push(twin_line)
    }
}

function set_line_options(line, status) {
    if (status === 'hover') {
        line.dash = {animation: true}
        line.size = 4
        // line.startPlug = 'square'
        // line.endPlug = 'square'
        // line.startPlugColor = '#f0ad4e'
        // line.endPlugColor = '#f0ad4e'
    } else {
        line.dash = false
        line.size = 2
        // line.startPlug = 'behind'
        // line.endPlug = 'behind'
    }
}

function outline_elements(elts, status) {
    elts.forEach(function (elt) {
        if (status) {
            $(elt).addClass('outlined')
        } else {
            $(elt).removeClass('outlined')
        }
    })
}

function delete_lines(server_id) {
    var ports = activated_servers[server_id]
    for (var key of Object.keys(ports)) {
        $('#'+key+'.port').removeClass('outlined')
        $('#'+key+'.port').removeClass('connection-activated')
        ports[key].forEach(function (line){
            line.hide()
            delete line
        })
        delete ports[key]
    }
    delete activated_servers[server_id]
}
